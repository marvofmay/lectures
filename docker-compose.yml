version: '3.5'

services:
  app:
    build:
      context: ./
      dockerfile: Dockerfile
    container_name: apps-recruitment-task
    extra_hosts:
      host.docker.internal: host-gateway
    volumes:
      - .:/var/www/html
    environment:
      - MESSENGER_TRANSPORT_DSN=amqp://guest:guest@rabbitmq:5672/%2f
      - MONGODB_URL=mongodb://mongo:27017  # Usunięcie hasła z URL
      - MONGODB_DB=apps-recruitment-task
    ports:
      - "81:80"
    depends_on:
      - database
      - rabbitmq

  database:
    image: mongo:latest
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db

  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    restart: always
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_ADMINUSERNAME: ''
      ME_CONFIG_MONGODB_ADMINPASSWORD: ''
      ME_CONFIG_MONGODB_ENABLE_ADMIN: 'true'
      ME_CONFIG_OPTIONS_EDITORTHEME: 'ambiance'
      ME_CONFIG_SITE_BASEURL: '/'
      ME_CONFIG_BASICAUTH_USERNAME: root
      ME_CONFIG_BASICAUTH_PASSWORD: example
      ME_CONFIG_MONGODB_URL: 'mongodb://mongo:27017/apps-recruitment-task'
    depends_on:
      - database

  worker-enroll-lecture:
    container_name: worker-enroll-lecture
    build:
      context: ./
      dockerfile: Dockerfile
    command: [ "php", "bin/console", "messenger:consume", "enroll_lecture", "--verbose", "--no-interaction" ]
    depends_on:
      - rabbitmq
      - app
    environment:
      - MESSENGER_TRANSPORT_DSN=amqp://guest:guest@rabbitmq:5672/%2f
    volumes:
      - ./src:/var/www/html

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq/

###> doctrine/mongodb-odm-bundle ###
  mongodb:
    # In production, you may want to use a managed database service
    image: mongodb/mongodb-community-server:latest
    environment:
      - MONGODB_INITDB_DATABASE=${MONGODB_DB:-app}
      # You should definitely set a root username and password in production
      - MONGODB_INITDB_ROOT_USERNAME=${MONGODB_USERNAME:-}
      - MONGODB_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD:-}
    volumes:
      - mongodb_data:/data/db:rw
      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./docker/mongodb/data:/data/db:rw
###< doctrine/mongodb-odm-bundle ###

volumes:
  mongo-data:

###> doctrine/mongodb-odm-bundle ###
  mongodb_data:
###< doctrine/mongodb-odm-bundle ###
